{"ast":null,"code":"import _regeneratorRuntime from\"/root/home/covid/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(login),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(logout),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(register),_marked4=/*#__PURE__*/_regeneratorRuntime.mark(forgetPassword),_marked5=/*#__PURE__*/_regeneratorRuntime.mark(watchLoginUser),_marked6=/*#__PURE__*/_regeneratorRuntime.mark(watchLogoutUser),_marked7=/*#__PURE__*/_regeneratorRuntime.mark(watchRegisterUser),_marked8=/*#__PURE__*/_regeneratorRuntime.mark(watchForgetPassword),_marked9=/*#__PURE__*/_regeneratorRuntime.mark(authSaga);import{Cookies}from'react-cookie';import{all,call,fork,put,takeEvery}from'redux-saga/effects';import{fetchJSON}from'../../helpers/api';import{LOGIN_USER,LOGOUT_USER,REGISTER_USER,FORGET_PASSWORD}from'./constants';import{loginUserSuccess,loginUserFailed,registerUserSuccess,registerUserFailed,forgetPasswordSuccess,forgetPasswordFailed}from'./actions';/**\r\n * Sets the session\r\n * @param {*} user\r\n */var setSession=function setSession(user){var cookies=new Cookies();if(user)cookies.set('user',JSON.stringify(user),{path:'/'});else cookies.remove('user',{path:'/'});};/**\r\n * Login the user\r\n * @param {*} payload - username and password\r\n */function login(_ref){var _ref$payload,username,password,options,response,message;return _regeneratorRuntime.wrap(function login$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref$payload=_ref.payload,username=_ref$payload.username,password=_ref$payload.password;options={body:JSON.stringify({username,password}),method:'POST',headers:{'Content-Type':'application/json'}};_context.prev=2;_context.next=5;return call(fetchJSON,'/users/authenticate',options);case 5:response=_context.sent;setSession(response);_context.next=9;return put(loginUserSuccess(response));case 9:_context.next=24;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](2);_context.t1=_context.t0.status;_context.next=_context.t1===500?16:_context.t1===401?18:20;break;case 16:message='Internal Server Error';return _context.abrupt(\"break\",21);case 18:message='Invalid credentials';return _context.abrupt(\"break\",21);case 20:message=_context.t0;case 21:_context.next=23;return put(loginUserFailed(message));case 23:setSession(null);case 24:case\"end\":return _context.stop();}}},_marked,null,[[2,11]]);}/**\r\n * Logout the user\r\n * @param {*} param0\r\n */function logout(_ref2){var history;return _regeneratorRuntime.wrap(function logout$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:history=_ref2.payload.history;_context2.prev=1;setSession(null);_context2.next=5;return call(function(){history.push('/account/login');});case 5:_context2.next=9;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](1);case 9:case\"end\":return _context2.stop();}}},_marked2,null,[[1,7]]);}/**\r\n * Register the user\r\n */function register(_ref3){var _ref3$payload,fullname,email,password,options,response,message;return _regeneratorRuntime.wrap(function register$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_ref3$payload=_ref3.payload,fullname=_ref3$payload.fullname,email=_ref3$payload.email,password=_ref3$payload.password;options={body:JSON.stringify({fullname,email,password}),method:'POST',headers:{'Content-Type':'application/json'}};_context3.prev=2;_context3.next=5;return call(fetchJSON,'/users/register',options);case 5:response=_context3.sent;_context3.next=8;return put(registerUserSuccess(response));case 8:_context3.next=22;break;case 10:_context3.prev=10;_context3.t0=_context3[\"catch\"](2);_context3.t1=_context3.t0.status;_context3.next=_context3.t1===500?15:_context3.t1===401?17:19;break;case 15:message='Internal Server Error';return _context3.abrupt(\"break\",20);case 17:message='Invalid credentials';return _context3.abrupt(\"break\",20);case 19:message=_context3.t0;case 20:_context3.next=22;return put(registerUserFailed(message));case 22:case\"end\":return _context3.stop();}}},_marked3,null,[[2,10]]);}/**\r\n * forget password\r\n */function forgetPassword(_ref4){var username,options,response,message;return _regeneratorRuntime.wrap(function forgetPassword$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:username=_ref4.payload.username;options={body:JSON.stringify({username}),method:'POST',headers:{'Content-Type':'application/json'}};_context4.prev=2;_context4.next=5;return call(fetchJSON,'/users/password-reset',options);case 5:response=_context4.sent;_context4.next=8;return put(forgetPasswordSuccess(response.message));case 8:_context4.next=22;break;case 10:_context4.prev=10;_context4.t0=_context4[\"catch\"](2);_context4.t1=_context4.t0.status;_context4.next=_context4.t1===500?15:_context4.t1===401?17:19;break;case 15:message='Internal Server Error';return _context4.abrupt(\"break\",20);case 17:message='Invalid credentials';return _context4.abrupt(\"break\",20);case 19:message=_context4.t0;case 20:_context4.next=22;return put(forgetPasswordFailed(message));case 22:case\"end\":return _context4.stop();}}},_marked4,null,[[2,10]]);}export function watchLoginUser(){return _regeneratorRuntime.wrap(function watchLoginUser$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return takeEvery(LOGIN_USER,login);case 2:case\"end\":return _context5.stop();}}},_marked5);}export function watchLogoutUser(){return _regeneratorRuntime.wrap(function watchLogoutUser$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return takeEvery(LOGOUT_USER,logout);case 2:case\"end\":return _context6.stop();}}},_marked6);}export function watchRegisterUser(){return _regeneratorRuntime.wrap(function watchRegisterUser$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return takeEvery(REGISTER_USER,register);case 2:case\"end\":return _context7.stop();}}},_marked7);}export function watchForgetPassword(){return _regeneratorRuntime.wrap(function watchForgetPassword$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return takeEvery(FORGET_PASSWORD,forgetPassword);case 2:case\"end\":return _context8.stop();}}},_marked8);}function authSaga(){return _regeneratorRuntime.wrap(function authSaga$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return all([fork(watchLoginUser),fork(watchLogoutUser),fork(watchRegisterUser),fork(watchForgetPassword)]);case 2:case\"end\":return _context9.stop();}}},_marked9);}export default authSaga;","map":{"version":3,"sources":["/root/home/covid/frontend/src/redux/auth/saga.js"],"names":["login","logout","register","forgetPassword","watchLoginUser","watchLogoutUser","watchRegisterUser","watchForgetPassword","authSaga","Cookies","all","call","fork","put","takeEvery","fetchJSON","LOGIN_USER","LOGOUT_USER","REGISTER_USER","FORGET_PASSWORD","loginUserSuccess","loginUserFailed","registerUserSuccess","registerUserFailed","forgetPasswordSuccess","forgetPasswordFailed","setSession","user","cookies","set","JSON","stringify","path","remove","payload","username","password","options","body","method","headers","response","status","message","history","push","fullname","email"],"mappings":"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","sourcesContent":["// @flow\r\nimport { Cookies } from 'react-cookie';\r\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { fetchJSON } from '../../helpers/api';\r\n\r\nimport { LOGIN_USER, LOGOUT_USER, REGISTER_USER, FORGET_PASSWORD } from './constants';\r\n\r\nimport {\r\n    loginUserSuccess,\r\n    loginUserFailed,\r\n    registerUserSuccess,\r\n    registerUserFailed,\r\n    forgetPasswordSuccess,\r\n    forgetPasswordFailed,\r\n} from './actions';\r\n\r\n/**\r\n * Sets the session\r\n * @param {*} user\r\n */\r\nconst setSession = user => {\r\n    let cookies = new Cookies();\r\n    if (user) cookies.set('user', JSON.stringify(user), { path: '/' });\r\n    else cookies.remove('user', { path: '/' });\r\n};\r\n/**\r\n * Login the user\r\n * @param {*} payload - username and password\r\n */\r\nfunction* login({ payload: { username, password } }) {\r\n    const options = {\r\n        body: JSON.stringify({ username, password }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/authenticate', options);\r\n        setSession(response);\r\n        yield put(loginUserSuccess(response));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500:\r\n                message = 'Internal Server Error';\r\n                break;\r\n            case 401:\r\n                message = 'Invalid credentials';\r\n                break;\r\n            default:\r\n                message = error;\r\n        }\r\n        yield put(loginUserFailed(message));\r\n        setSession(null);\r\n    }\r\n}\r\n\r\n/**\r\n * Logout the user\r\n * @param {*} param0\r\n */\r\nfunction* logout({ payload: { history } }) {\r\n    try {\r\n        setSession(null);\r\n        yield call(() => {\r\n            history.push('/account/login');\r\n        });\r\n    } catch (error) {}\r\n}\r\n\r\n/**\r\n * Register the user\r\n */\r\nfunction* register({ payload: { fullname, email, password } }) {\r\n    const options = {\r\n        body: JSON.stringify({ fullname, email, password }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/register', options);\r\n        yield put(registerUserSuccess(response));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500:\r\n                message = 'Internal Server Error';\r\n                break;\r\n            case 401:\r\n                message = 'Invalid credentials';\r\n                break;\r\n            default:\r\n                message = error;\r\n        }\r\n        yield put(registerUserFailed(message));\r\n    }\r\n}\r\n\r\n/**\r\n * forget password\r\n */\r\nfunction* forgetPassword({ payload: { username } }) {\r\n    const options = {\r\n        body: JSON.stringify({ username }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/password-reset', options);\r\n        yield put(forgetPasswordSuccess(response.message));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500:\r\n                message = 'Internal Server Error';\r\n                break;\r\n            case 401:\r\n                message = 'Invalid credentials';\r\n                break;\r\n            default:\r\n                message = error;\r\n        }\r\n        yield put(forgetPasswordFailed(message));\r\n    }\r\n}\r\n\r\nexport function* watchLoginUser() {\r\n    yield takeEvery(LOGIN_USER, login);\r\n}\r\n\r\nexport function* watchLogoutUser() {\r\n    yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nexport function* watchRegisterUser() {\r\n    yield takeEvery(REGISTER_USER, register);\r\n}\r\n\r\nexport function* watchForgetPassword() {\r\n    yield takeEvery(FORGET_PASSWORD, forgetPassword);\r\n}\r\n\r\nfunction* authSaga() {\r\n    yield all([fork(watchLoginUser), fork(watchLogoutUser), fork(watchRegisterUser), fork(watchForgetPassword)]);\r\n}\r\n\r\nexport default authSaga;\r\n"]},"metadata":{},"sourceType":"module"}