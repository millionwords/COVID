{"ast":null,"code":"import jwtDecode from'jwt-decode';import{Cookies}from'react-cookie';/**\n * Checks if user is authenticated\n */var isUserAuthenticated=function isUserAuthenticated(){var user=getLoggedInUser();if(!user){return false;}var decoded=jwtDecode(user.token);var currentTime=Date.now()/1000;if(decoded.exp<currentTime){console.warn('access token expired');return false;}else{return true;}};/**\n * Returns the logged in user\n */var getLoggedInUser=function getLoggedInUser(){var cookies=new Cookies();var user=cookies.get('user');return user?typeof user=='object'?user:JSON.parse(user):null;};export{isUserAuthenticated,getLoggedInUser};","map":{"version":3,"sources":["/root/home/covid/frontend/src/helpers/authUtils.js"],"names":["jwtDecode","Cookies","isUserAuthenticated","user","getLoggedInUser","decoded","token","currentTime","Date","now","exp","console","warn","cookies","get","JSON","parse"],"mappings":"AACA,MAAOA,CAAAA,SAAP,KAAsB,YAAtB,CACA,OAASC,OAAT,KAAwB,cAAxB,CAEA;;GAGA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9B,GAAMC,CAAAA,IAAI,CAAGC,eAAe,EAA5B,CACA,GAAI,CAACD,IAAL,CAAW,CACP,MAAO,MAAP,CACH,CACD,GAAME,CAAAA,OAAO,CAAGL,SAAS,CAACG,IAAI,CAACG,KAAN,CAAzB,CACA,GAAMC,CAAAA,WAAW,CAAGC,IAAI,CAACC,GAAL,GAAa,IAAjC,CACA,GAAIJ,OAAO,CAACK,GAAR,CAAcH,WAAlB,CAA+B,CAC3BI,OAAO,CAACC,IAAR,CAAa,sBAAb,EACA,MAAO,MAAP,CACH,CAHD,IAGO,CACH,MAAO,KAAP,CACH,CACJ,CAbD,CAeA;;GAGA,GAAMR,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC1B,GAAMS,CAAAA,OAAO,CAAG,GAAIZ,CAAAA,OAAJ,EAAhB,CACA,GAAME,CAAAA,IAAI,CAAGU,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAb,CACA,MAAOX,CAAAA,IAAI,CAAI,MAAOA,CAAAA,IAAP,EAAe,QAAf,CAA0BA,IAA1B,CAAiCY,IAAI,CAACC,KAAL,CAAWb,IAAX,CAArC,CAAyD,IAApE,CACH,CAJD,CAMA,OAASD,mBAAT,CAA8BE,eAA9B","sourcesContent":["// @flow\nimport jwtDecode from 'jwt-decode';\nimport { Cookies } from 'react-cookie';\n\n/**\n * Checks if user is authenticated\n */\nconst isUserAuthenticated = () => {\n    const user = getLoggedInUser();\n    if (!user) {\n        return false;\n    }\n    const decoded = jwtDecode(user.token);\n    const currentTime = Date.now() / 1000;\n    if (decoded.exp < currentTime) {\n        console.warn('access token expired');\n        return false;\n    } else {\n        return true;\n    }\n};\n\n/**\n * Returns the logged in user\n */\nconst getLoggedInUser = () => {\n    const cookies = new Cookies();\n    const user = cookies.get('user');\n    return user ? (typeof user == 'object' ? user : JSON.parse(user)) : null;\n};\n\nexport { isUserAuthenticated, getLoggedInUser };\n"]},"metadata":{},"sourceType":"module"}