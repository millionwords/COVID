{"ast":null,"code":"export function configureFakeBackend(){var users=[{id:1,username:'test',password:'test',firstName:'Test',lastName:'User',role:'Admin'}];var realFetch=window.fetch;window.fetch=function(url,opts){return new Promise(function(resolve,reject){// wrap in timeout to simulate server api call\nsetTimeout(function(){// authenticate\nif(url.endsWith('/users/authenticate')&&opts.method==='POST'){// get parameters from post request\nvar params=JSON.parse(opts.body);// find if any user matches login credentials\nvar filteredUsers=users.filter(function(user){return user.username===params.username&&user.password===params.password;});if(filteredUsers.length){// if login details are valid return user details and fake jwt token\nvar user=filteredUsers[0];var responseJson={id:user.id,username:user.username,firstName:user.firstName,lastName:user.lastName,role:'Admin',token:'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJTaHJleXUifQ.D-isMYoGH6Ah4i_dHxplgJNGtXTLEqZYvha_ULSJRFU'};resolve({ok:true,json:function json(){return responseJson;}});}else{// else return error\nreject('Username or password is incorrect');}return;}// register\nif(url.endsWith('/users/register')&&opts.method==='POST'){// get parameters from post request\nvar _params=JSON.parse(opts.body);// add new users\nvar _params$fullname$spli=_params.fullname.split(' '),firstName=_params$fullname$spli.firstName,lastName=_params$fullname$spli.lastName;var newUser={id:users.length+1,username:firstName,password:_params.password,firstName:firstName,lastName:lastName,role:'Admin'};users.push({newUser});var _responseJson={id:newUser.id,username:newUser.username,firstName:newUser.firstName,lastName:newUser.lastName,role:newUser.role,token:'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJTaHJleXUifQ.D-isMYoGH6Ah4i_dHxplgJNGtXTLEqZYvha_ULSJRFU'};resolve({ok:true,json:function json(){return _responseJson;}});return;}// forget password\nif(url.endsWith('/users/password-reset')&&opts.method==='POST'){// get parameters from post request\nvar _params2=JSON.parse(opts.body);// find if any user matches login credentials\nvar _filteredUsers=users.filter(function(user){return user.username===_params2.username;});if(_filteredUsers.length){var _responseJson2={message:\"We've sent you a link to reset password to your registered email.\"};resolve({ok:true,json:function json(){return _responseJson2;}});}else{// else return error\nreject('Sorry, we could not find any registered user with entered username');}return;}// get users\nif(url.endsWith('/users')&&opts.method==='GET'){// check for fake auth token in header and return users if valid, this security is implemented server side in a real application\nif(opts.headers&&opts.headers.Authorization==='Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJTaHJleXUifQ.D-isMYoGH6Ah4i_dHxplgJNGtXTLEqZYvha_ULSJRFU'){resolve({ok:true,json:function json(){return users;}});}else{// return 401 not authorised if token is null or invalid\nreject('Unauthorised');}return;}// pass through any requests not handled above\nrealFetch(url,opts).then(function(response){return resolve(response);});},500);});};}","map":{"version":3,"sources":["/root/home/covid/frontend/src/helpers/fake-backend.js"],"names":["configureFakeBackend","users","id","username","password","firstName","lastName","role","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","filteredUsers","filter","user","length","responseJson","token","ok","json","fullname","split","newUser","push","message","headers","Authorization","then","response"],"mappings":"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","sourcesContent":["export function configureFakeBackend() {\n    let users = [{ id: 1, username: 'test', password: 'test', firstName: 'Test', lastName: 'User', role: 'Admin' }];\n    let realFetch = window.fetch;\n    window.fetch = function(url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {\n                // authenticate\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username && user.password === params.password;\n                    });\n\n                    if (filteredUsers.length) {\n                        // if login details are valid return user details and fake jwt token\n                        let user = filteredUsers[0];\n                        let responseJson = {\n                            id: user.id,\n                            username: user.username,\n                            firstName: user.firstName,\n                            lastName: user.lastName,\n                            role: 'Admin',\n                            token:\n                                'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJTaHJleXUifQ.D-isMYoGH6Ah4i_dHxplgJNGtXTLEqZYvha_ULSJRFU',\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Username or password is incorrect');\n                    }\n                    return;\n                }\n\n                // register\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // add new users\n                    let { firstName, lastName } = params.fullname.split(' ');\n                    let newUser = {\n                        id: users.length + 1,\n                        username: firstName,\n                        password: params.password,\n                        firstName: firstName,\n                        lastName: lastName,\n                        role: 'Admin',\n                    };\n                    users.push({ newUser });\n\n                    let responseJson = {\n                        id: newUser.id,\n                        username: newUser.username,\n                        firstName: newUser.firstName,\n                        lastName: newUser.lastName,\n                        role: newUser.role,\n                        token:\n                            'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJTaHJleXUifQ.D-isMYoGH6Ah4i_dHxplgJNGtXTLEqZYvha_ULSJRFU',\n                    };\n                    resolve({ ok: true, json: () => responseJson });\n                    return;\n                }\n\n                // forget password\n                if (url.endsWith('/users/password-reset') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username;\n                    });\n\n                    if (filteredUsers.length) {\n                        let responseJson = {\n                            message: \"We've sent you a link to reset password to your registered email.\",\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Sorry, we could not find any registered user with entered username');\n                    }\n                    return;\n                }\n\n                // get users\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n                    if (\n                        opts.headers &&\n                        opts.headers.Authorization ===\n                            'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJTaHJleXUifQ.D-isMYoGH6Ah4i_dHxplgJNGtXTLEqZYvha_ULSJRFU'\n                    ) {\n                        resolve({ ok: true, json: () => users });\n                    } else {\n                        // return 401 not authorised if token is null or invalid\n                        reject('Unauthorised');\n                    }\n\n                    return;\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n            }, 500);\n        });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}